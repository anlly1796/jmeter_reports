/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 1169.0, "minX": 0.0, "maxY": 2074331.0, "series": [{"data": [[0.0, 1169.0], [0.1, 1169.0], [0.2, 1237.0], [0.3, 1273.0], [0.4, 1273.0], [0.5, 1456.0], [0.6, 1525.0], [0.7, 1720.0], [0.8, 1720.0], [0.9, 1773.0], [1.0, 1780.0], [1.1, 1805.0], [1.2, 1805.0], [1.3, 1817.0], [1.4, 1835.0], [1.5, 1853.0], [1.6, 1853.0], [1.7, 1853.0], [1.8, 1868.0], [1.9, 1868.0], [2.0, 1977.0], [2.1, 2012.0], [2.2, 2034.0], [2.3, 2034.0], [2.4, 2092.0], [2.5, 2151.0], [2.6, 2158.0], [2.7, 2158.0], [2.8, 2200.0], [2.9, 2223.0], [3.0, 2227.0], [3.1, 2227.0], [3.2, 2245.0], [3.3, 2250.0], [3.4, 2271.0], [3.5, 2271.0], [3.6, 2281.0], [3.7, 2283.0], [3.8, 2283.0], [3.9, 2294.0], [4.0, 2294.0], [4.1, 2312.0], [4.2, 2312.0], [4.3, 2333.0], [4.4, 2346.0], [4.5, 2358.0], [4.6, 2358.0], [4.7, 2366.0], [4.8, 2394.0], [4.9, 2420.0], [5.0, 2420.0], [5.1, 2424.0], [5.2, 2435.0], [5.3, 2443.0], [5.4, 2443.0], [5.5, 2445.0], [5.6, 2445.0], [5.7, 2445.0], [5.8, 2446.0], [5.9, 2451.0], [6.0, 2468.0], [6.1, 2468.0], [6.2, 2478.0], [6.3, 2481.0], [6.4, 2486.0], [6.5, 2486.0], [6.6, 2496.0], [6.7, 2505.0], [6.8, 2509.0], [6.9, 2509.0], [7.0, 2515.0], [7.1, 2515.0], [7.2, 2515.0], [7.3, 2517.0], [7.4, 2520.0], [7.5, 2523.0], [7.6, 2523.0], [7.7, 2523.0], [7.8, 2525.0], [7.9, 2525.0], [8.0, 2525.0], [8.1, 2533.0], [8.2, 2536.0], [8.3, 2544.0], [8.4, 2544.0], [8.5, 2548.0], [8.6, 2551.0], [8.7, 2563.0], [8.8, 2563.0], [8.9, 2565.0], [9.0, 2570.0], [9.1, 2570.0], [9.2, 2571.0], [9.3, 2578.0], [9.4, 2587.0], [9.5, 2587.0], [9.6, 2588.0], [9.7, 2594.0], [9.8, 2616.0], [9.9, 2616.0], [10.0, 2617.0], [10.1, 2618.0], [10.2, 2625.0], [10.3, 2625.0], [10.4, 2629.0], [10.5, 2633.0], [10.6, 2640.0], [10.7, 2640.0], [10.8, 2644.0], [10.9, 2651.0], [11.0, 2651.0], [11.1, 2655.0], [11.2, 2656.0], [11.3, 2659.0], [11.4, 2659.0], [11.5, 2659.0], [11.6, 2661.0], [11.7, 2668.0], [11.8, 2668.0], [11.9, 2670.0], [12.0, 2671.0], [12.1, 2676.0], [12.2, 2676.0], [12.3, 2691.0], [12.4, 2694.0], [12.5, 2707.0], [12.6, 2707.0], [12.7, 2709.0], [12.8, 2719.0], [12.9, 2719.0], [13.0, 2722.0], [13.1, 2736.0], [13.2, 2736.0], [13.3, 2736.0], [13.4, 2739.0], [13.5, 2749.0], [13.6, 2754.0], [13.7, 2754.0], [13.8, 2764.0], [13.9, 2766.0], [14.0, 2767.0], [14.1, 2767.0], [14.2, 2790.0], [14.3, 2792.0], [14.4, 2792.0], [14.5, 2797.0], [14.6, 2812.0], [14.7, 2826.0], [14.8, 2826.0], [14.9, 2829.0], [15.0, 2843.0], [15.1, 2847.0], [15.2, 2847.0], [15.3, 2849.0], [15.4, 2864.0], [15.5, 2866.0], [15.6, 2866.0], [15.7, 2894.0], [15.8, 2901.0], [15.9, 2915.0], [16.0, 2915.0], [16.1, 2922.0], [16.2, 2934.0], [16.3, 2934.0], [16.4, 2945.0], [16.5, 2950.0], [16.6, 2960.0], [16.7, 2960.0], [16.8, 2960.0], [16.9, 2978.0], [17.0, 2990.0], [17.1, 2990.0], [17.2, 2997.0], [17.3, 2998.0], [17.4, 3019.0], [17.5, 3019.0], [17.6, 3027.0], [17.7, 3035.0], [17.8, 3056.0], [17.9, 3056.0], [18.0, 3062.0], [18.1, 3091.0], [18.2, 3091.0], [18.3, 3116.0], [18.4, 3124.0], [18.5, 3190.0], [18.6, 3190.0], [18.7, 3206.0], [18.8, 3269.0], [18.9, 3287.0], [19.0, 3287.0], [19.1, 3292.0], [19.2, 3294.0], [19.3, 3346.0], [19.4, 3346.0], [19.5, 3371.0], [19.6, 3380.0], [19.7, 3380.0], [19.8, 3387.0], [19.9, 3394.0], [20.0, 3396.0], [20.1, 3396.0], [20.2, 3420.0], [20.3, 3421.0], [20.4, 3421.0], [20.5, 3421.0], [20.6, 3424.0], [20.7, 3456.0], [20.8, 3466.0], [20.9, 3466.0], [21.0, 3475.0], [21.1, 3479.0], [21.2, 3480.0], [21.3, 3480.0], [21.4, 3493.0], [21.5, 3498.0], [21.6, 3498.0], [21.7, 3511.0], [21.8, 3513.0], [21.9, 3515.0], [22.0, 3515.0], [22.1, 3540.0], [22.2, 3545.0], [22.3, 3553.0], [22.4, 3553.0], [22.5, 3568.0], [22.6, 3574.0], [22.7, 3580.0], [22.8, 3580.0], [22.9, 3583.0], [23.0, 3584.0], [23.1, 3586.0], [23.2, 3586.0], [23.3, 3603.0], [23.4, 3612.0], [23.5, 3612.0], [23.6, 3613.0], [23.7, 3614.0], [23.8, 3623.0], [23.9, 3623.0], [24.0, 3645.0], [24.1, 3664.0], [24.2, 3689.0], [24.3, 3689.0], [24.4, 3698.0], [24.5, 3705.0], [24.6, 3708.0], [24.7, 3708.0], [24.8, 3714.0], [24.9, 3730.0], [25.0, 3734.0], [25.1, 3734.0], [25.2, 3743.0], [25.3, 3744.0], [25.4, 3744.0], [25.5, 3751.0], [25.6, 3757.0], [25.7, 3757.0], [25.8, 3757.0], [25.9, 3784.0], [26.0, 3789.0], [26.1, 3798.0], [26.2, 3798.0], [26.3, 3805.0], [26.4, 3816.0], [26.5, 3819.0], [26.6, 3819.0], [26.7, 3840.0], [26.8, 3846.0], [26.9, 3846.0], [27.0, 3854.0], [27.1, 3860.0], [27.2, 3895.0], [27.3, 3895.0], [27.4, 3910.0], [27.5, 3916.0], [27.6, 3920.0], [27.7, 3920.0], [27.8, 3942.0], [27.9, 3944.0], [28.0, 3960.0], [28.1, 3960.0], [28.2, 3963.0], [28.3, 4005.0], [28.4, 4014.0], [28.5, 4014.0], [28.6, 4021.0], [28.7, 4124.0], [28.8, 4124.0], [28.9, 4163.0], [29.0, 4170.0], [29.1, 4178.0], [29.2, 4178.0], [29.3, 4183.0], [29.4, 4188.0], [29.5, 4191.0], [29.6, 4191.0], [29.7, 4194.0], [29.8, 4208.0], [29.9, 4218.0], [30.0, 4218.0], [30.1, 4226.0], [30.2, 4241.0], [30.3, 4248.0], [30.4, 4248.0], [30.5, 4250.0], [30.6, 4252.0], [30.7, 4252.0], [30.8, 4259.0], [30.9, 4269.0], [31.0, 4283.0], [31.1, 4283.0], [31.2, 4312.0], [31.3, 4317.0], [31.4, 4339.0], [31.5, 4339.0], [31.6, 4390.0], [31.7, 4401.0], [31.8, 4436.0], [31.9, 4436.0], [32.0, 4437.0], [32.1, 4445.0], [32.2, 4445.0], [32.3, 4446.0], [32.4, 4476.0], [32.5, 4477.0], [32.6, 4477.0], [32.7, 4480.0], [32.8, 4519.0], [32.9, 4519.0], [33.0, 4519.0], [33.1, 4547.0], [33.2, 4552.0], [33.3, 4570.0], [33.4, 4570.0], [33.5, 4623.0], [33.6, 4647.0], [33.7, 4648.0], [33.8, 4648.0], [33.9, 4649.0], [34.0, 4668.0], [34.1, 4668.0], [34.2, 4674.0], [34.3, 4696.0], [34.4, 4701.0], [34.5, 4701.0], [34.6, 4715.0], [34.7, 4717.0], [34.8, 4721.0], [34.9, 4721.0], [35.0, 4728.0], [35.1, 4739.0], [35.2, 4745.0], [35.3, 4745.0], [35.4, 4752.0], [35.5, 4758.0], [35.6, 4759.0], [35.7, 4759.0], [35.8, 4784.0], [35.9, 4799.0], [36.0, 4799.0], [36.1, 4813.0], [36.2, 4813.0], [36.3, 4815.0], [36.4, 4815.0], [36.5, 4820.0], [36.6, 4836.0], [36.7, 4857.0], [36.8, 4857.0], [36.9, 4861.0], [37.0, 4870.0], [37.1, 4876.0], [37.2, 4876.0], [37.3, 4890.0], [37.4, 4895.0], [37.5, 4926.0], [37.6, 4926.0], [37.7, 4931.0], [37.8, 4932.0], [37.9, 4932.0], [38.0, 4934.0], [38.1, 4949.0], [38.2, 4956.0], [38.3, 4956.0], [38.4, 4968.0], [38.5, 4983.0], [38.6, 4998.0], [38.7, 4998.0], [38.8, 5002.0], [38.9, 5004.0], [39.0, 5004.0], [39.1, 5004.0], [39.2, 5011.0], [39.3, 5011.0], [39.4, 5011.0], [39.5, 5013.0], [39.6, 5026.0], [39.7, 5028.0], [39.8, 5028.0], [39.9, 5033.0], [40.0, 5071.0], [40.1, 5083.0], [40.2, 5083.0], [40.3, 5097.0], [40.4, 5122.0], [40.5, 5168.0], [40.6, 5168.0], [40.7, 5178.0], [40.8, 5185.0], [40.9, 5188.0], [41.0, 5188.0], [41.1, 5194.0], [41.2, 5197.0], [41.3, 5197.0], [41.4, 5220.0], [41.5, 5237.0], [41.6, 5269.0], [41.7, 5269.0], [41.8, 5272.0], [41.9, 5280.0], [42.0, 5301.0], [42.1, 5301.0], [42.2, 5309.0], [42.3, 5316.0], [42.4, 5328.0], [42.5, 5328.0], [42.6, 5330.0], [42.7, 5359.0], [42.8, 5373.0], [42.9, 5373.0], [43.0, 5395.0], [43.1, 5418.0], [43.2, 5418.0], [43.3, 5430.0], [43.4, 5448.0], [43.5, 5459.0], [43.6, 5459.0], [43.7, 5463.0], [43.8, 5468.0], [43.9, 5475.0], [44.0, 5475.0], [44.1, 5482.0], [44.2, 5510.0], [44.3, 5512.0], [44.4, 5512.0], [44.5, 5533.0], [44.6, 5544.0], [44.7, 5544.0], [44.8, 5576.0], [44.9, 5598.0], [45.0, 5615.0], [45.1, 5615.0], [45.2, 5635.0], [45.3, 5677.0], [45.4, 5692.0], [45.5, 5692.0], [45.6, 5700.0], [45.7, 5709.0], [45.8, 5725.0], [45.9, 5725.0], [46.0, 5738.0], [46.1, 5741.0], [46.2, 5747.0], [46.3, 5747.0], [46.4, 5753.0], [46.5, 5783.0], [46.6, 5783.0], [46.7, 5793.0], [46.8, 5848.0], [46.9, 5850.0], [47.0, 5850.0], [47.1, 5864.0], [47.2, 5882.0], [47.3, 5890.0], [47.4, 5890.0], [47.5, 5907.0], [47.6, 5909.0], [47.7, 5912.0], [47.8, 5912.0], [47.9, 5919.0], [48.0, 5939.0], [48.1, 5949.0], [48.2, 5949.0], [48.3, 5966.0], [48.4, 5989.0], [48.5, 5989.0], [48.6, 6015.0], [48.7, 6088.0], [48.8, 6098.0], [48.9, 6098.0], [49.0, 6113.0], [49.1, 6144.0], [49.2, 6147.0], [49.3, 6147.0], [49.4, 6148.0], [49.5, 6192.0], [49.6, 6252.0], [49.7, 6252.0], [49.8, 6258.0], [49.9, 6275.0], [50.0, 6283.0], [50.1, 6283.0], [50.2, 6297.0], [50.3, 6315.0], [50.4, 6315.0], [50.5, 6346.0], [50.6, 6359.0], [50.7, 6381.0], [50.8, 6381.0], [50.9, 6444.0], [51.0, 6456.0], [51.1, 6478.0], [51.2, 6478.0], [51.3, 6506.0], [51.4, 6506.0], [51.5, 6509.0], [51.6, 6509.0], [51.7, 6521.0], [51.8, 6521.0], [51.9, 6521.0], [52.0, 6566.0], [52.1, 6599.0], [52.2, 6616.0], [52.3, 6616.0], [52.4, 6616.0], [52.5, 6655.0], [52.6, 6659.0], [52.7, 6659.0], [52.8, 6709.0], [52.9, 6729.0], [53.0, 6732.0], [53.1, 6732.0], [53.2, 6734.0], [53.3, 6736.0], [53.4, 6741.0], [53.5, 6741.0], [53.6, 6765.0], [53.7, 6800.0], [53.8, 6800.0], [53.9, 6849.0], [54.0, 6888.0], [54.1, 6927.0], [54.2, 6927.0], [54.3, 6934.0], [54.4, 6959.0], [54.5, 6998.0], [54.6, 6998.0], [54.7, 7027.0], [54.8, 7028.0], [54.9, 7068.0], [55.0, 7068.0], [55.1, 7088.0], [55.2, 7090.0], [55.3, 7096.0], [55.4, 7096.0], [55.5, 7162.0], [55.6, 7192.0], [55.7, 7192.0], [55.8, 7214.0], [55.9, 7244.0], [56.0, 7252.0], [56.1, 7252.0], [56.2, 7257.0], [56.3, 7268.0], [56.4, 7324.0], [56.5, 7324.0], [56.6, 7327.0], [56.7, 7338.0], [56.8, 7346.0], [56.9, 7346.0], [57.0, 7431.0], [57.1, 7443.0], [57.2, 7443.0], [57.3, 7494.0], [57.4, 7535.0], [57.5, 7537.0], [57.6, 7537.0], [57.7, 7539.0], [57.8, 7661.0], [57.9, 7682.0], [58.0, 7682.0], [58.1, 7725.0], [58.2, 7730.0], [58.3, 7746.0], [58.4, 7746.0], [58.5, 7756.0], [58.6, 7764.0], [58.7, 7779.0], [58.8, 7779.0], [58.9, 7793.0], [59.0, 7795.0], [59.1, 7795.0], [59.2, 7796.0], [59.3, 7798.0], [59.4, 7813.0], [59.5, 7813.0], [59.6, 7816.0], [59.7, 7819.0], [59.8, 7847.0], [59.9, 7847.0], [60.0, 7875.0], [60.1, 7925.0], [60.2, 7932.0], [60.3, 7932.0], [60.4, 7945.0], [60.5, 7958.0], [60.6, 7995.0], [60.7, 7995.0], [60.8, 8064.0], [60.9, 8070.0], [61.0, 8070.0], [61.1, 8095.0], [61.2, 8138.0], [61.3, 8172.0], [61.4, 8172.0], [61.5, 8186.0], [61.6, 8198.0], [61.7, 8226.0], [61.8, 8226.0], [61.9, 8231.0], [62.0, 8237.0], [62.1, 8267.0], [62.2, 8267.0], [62.3, 8392.0], [62.4, 8401.0], [62.5, 8414.0], [62.6, 8414.0], [62.7, 8428.0], [62.8, 8552.0], [62.9, 8552.0], [63.0, 8558.0], [63.1, 8564.0], [63.2, 8567.0], [63.3, 8567.0], [63.4, 8592.0], [63.5, 8598.0], [63.6, 8628.0], [63.7, 8628.0], [63.8, 8741.0], [63.9, 8790.0], [64.0, 8831.0], [64.1, 8831.0], [64.2, 8929.0], [64.3, 8933.0], [64.4, 8933.0], [64.5, 8939.0], [64.6, 9023.0], [64.7, 9026.0], [64.8, 9026.0], [64.9, 9156.0], [65.0, 9156.0], [65.1, 9231.0], [65.2, 9231.0], [65.3, 9240.0], [65.4, 9261.0], [65.5, 9315.0], [65.6, 9315.0], [65.7, 9329.0], [65.8, 9421.0], [65.9, 9495.0], [66.0, 9495.0], [66.1, 9584.0], [66.2, 9594.0], [66.3, 9594.0], [66.4, 9599.0], [66.5, 9645.0], [66.6, 9676.0], [66.7, 9676.0], [66.8, 9700.0], [66.9, 9793.0], [67.0, 9832.0], [67.1, 9832.0], [67.2, 9854.0], [67.3, 9871.0], [67.4, 10006.0], [67.5, 10006.0], [67.6, 10046.0], [67.7, 10105.0], [67.8, 10105.0], [67.9, 10105.0], [68.0, 10109.0], [68.1, 10155.0], [68.2, 10155.0], [68.3, 10159.0], [68.4, 10238.0], [68.5, 10349.0], [68.6, 10349.0], [68.7, 10376.0], [68.8, 10405.0], [68.9, 10413.0], [69.0, 10413.0], [69.1, 10546.0], [69.2, 10699.0], [69.3, 10771.0], [69.4, 10771.0], [69.5, 10812.0], [69.6, 10847.0], [69.7, 10847.0], [69.8, 11019.0], [69.9, 11060.0], [70.0, 11072.0], [70.1, 11072.0], [70.2, 11082.0], [70.3, 11116.0], [70.4, 11240.0], [70.5, 11240.0], [70.6, 11278.0], [70.7, 11300.0], [70.8, 11338.0], [70.9, 11338.0], [71.0, 11426.0], [71.1, 11479.0], [71.2, 11528.0], [71.3, 11528.0], [71.4, 11591.0], [71.5, 11611.0], [71.6, 11611.0], [71.7, 11838.0], [71.8, 11963.0], [71.9, 12077.0], [72.0, 12077.0], [72.1, 12087.0], [72.2, 12134.0], [72.3, 12175.0], [72.4, 12175.0], [72.5, 12303.0], [72.6, 12455.0], [72.7, 12500.0], [72.8, 12500.0], [72.9, 12659.0], [73.0, 12690.0], [73.1, 12720.0], [73.2, 12720.0], [73.3, 12765.0], [73.4, 12790.0], [73.5, 12790.0], [73.6, 12795.0], [73.7, 12811.0], [73.8, 12813.0], [73.9, 12813.0], [74.0, 12851.0], [74.1, 13174.0], [74.2, 13223.0], [74.3, 13223.0], [74.4, 13244.0], [74.5, 13332.0], [74.6, 13396.0], [74.7, 13396.0], [74.8, 13587.0], [74.9, 13705.0], [75.0, 13758.0], [75.1, 13758.0], [75.2, 13781.0], [75.3, 13844.0], [75.4, 13844.0], [75.5, 13977.0], [75.6, 13994.0], [75.7, 14122.0], [75.8, 14122.0], [75.9, 14206.0], [76.0, 14813.0], [76.1, 15133.0], [76.2, 15133.0], [76.3, 15472.0], [76.4, 15771.0], [76.5, 15882.0], [76.6, 15882.0], [76.7, 16068.0], [76.8, 16343.0], [76.9, 16343.0], [77.0, 16879.0], [77.1, 16915.0], [77.2, 16971.0], [77.3, 16971.0], [77.4, 17050.0], [77.5, 17278.0], [77.6, 17316.0], [77.7, 17316.0], [77.8, 17332.0], [77.9, 17372.0], [78.0, 17387.0], [78.1, 17387.0], [78.2, 17605.0], [78.3, 17615.0], [78.4, 17622.0], [78.5, 17622.0], [78.6, 17627.0], [78.7, 17655.0], [78.8, 17655.0], [78.9, 17704.0], [79.0, 17705.0], [79.1, 17750.0], [79.2, 17750.0], [79.3, 17792.0], [79.4, 17797.0], [79.5, 17843.0], [79.6, 17843.0], [79.7, 17856.0], [79.8, 17943.0], [79.9, 17962.0], [80.0, 17962.0], [80.1, 18106.0], [80.2, 18232.0], [80.3, 18240.0], [80.4, 18240.0], [80.5, 18425.0], [80.6, 18447.0], [80.7, 18447.0], [80.8, 18573.0], [80.9, 18637.0], [81.0, 18671.0], [81.1, 18671.0], [81.2, 18721.0], [81.3, 18801.0], [81.4, 18845.0], [81.5, 18845.0], [81.6, 18849.0], [81.7, 18865.0], [81.8, 18899.0], [81.9, 18899.0], [82.0, 18901.0], [82.1, 18934.0], [82.2, 18934.0], [82.3, 18982.0], [82.4, 19146.0], [82.5, 19178.0], [82.6, 19178.0], [82.7, 19201.0], [82.8, 19317.0], [82.9, 19320.0], [83.0, 19320.0], [83.1, 19438.0], [83.2, 19576.0], [83.3, 19599.0], [83.4, 19599.0], [83.5, 19634.0], [83.6, 19851.0], [83.7, 19873.0], [83.8, 19873.0], [83.9, 19926.0], [84.0, 19928.0], [84.1, 19928.0], [84.2, 20029.0], [84.3, 20058.0], [84.4, 20069.0], [84.5, 20069.0], [84.6, 20118.0], [84.7, 20137.0], [84.8, 20154.0], [84.9, 20154.0], [85.0, 20204.0], [85.1, 20269.0], [85.2, 20273.0], [85.3, 20273.0], [85.4, 20275.0], [85.5, 20294.0], [85.6, 20294.0], [85.7, 20294.0], [85.8, 20295.0], [85.9, 20362.0], [86.0, 20362.0], [86.1, 20403.0], [86.2, 20442.0], [86.3, 20677.0], [86.4, 20677.0], [86.5, 20755.0], [86.6, 20797.0], [86.7, 20822.0], [86.8, 20822.0], [86.9, 20828.0], [87.0, 20840.0], [87.1, 20878.0], [87.2, 20878.0], [87.3, 21019.0], [87.4, 21024.0], [87.5, 21027.0], [87.6, 21027.0], [87.7, 21028.0], [87.8, 21029.0], [87.9, 21029.0], [88.0, 21029.0], [88.1, 21030.0], [88.2, 21030.0], [88.3, 21030.0], [88.4, 21032.0], [88.5, 21032.0], [88.6, 21034.0], [88.7, 21034.0], [88.8, 21035.0], [88.9, 21035.0], [89.0, 21037.0], [89.1, 21037.0], [89.2, 21037.0], [89.3, 21040.0], [89.4, 21040.0], [89.5, 21040.0], [89.6, 21040.0], [89.7, 21041.0], [89.8, 21041.0], [89.9, 21041.0], [90.0, 21041.0], [90.1, 21042.0], [90.2, 21042.0], [90.3, 21042.0], [90.4, 21042.0], [90.5, 21044.0], [90.6, 21044.0], [90.7, 21044.0], [90.8, 21045.0], [90.9, 21045.0], [91.0, 21045.0], [91.1, 21046.0], [91.2, 21047.0], [91.3, 21047.0], [91.4, 21047.0], [91.5, 21048.0], [91.6, 21049.0], [91.7, 21049.0], [91.8, 21049.0], [91.9, 21050.0], [92.0, 21051.0], [92.1, 21051.0], [92.2, 21053.0], [92.3, 21053.0], [92.4, 21055.0], [92.5, 21055.0], [92.6, 21056.0], [92.7, 21062.0], [92.8, 21069.0], [92.9, 21069.0], [93.0, 21191.0], [93.1, 21198.0], [93.2, 21198.0], [93.3, 21262.0], [93.4, 21431.0], [93.5, 21457.0], [93.6, 21457.0], [93.7, 21718.0], [93.8, 21785.0], [93.9, 21911.0], [94.0, 21911.0], [94.1, 22001.0], [94.2, 22005.0], [94.3, 22174.0], [94.4, 22174.0], [94.5, 22263.0], [94.6, 22370.0], [94.7, 22370.0], [94.8, 22462.0], [94.9, 22685.0], [95.0, 22885.0], [95.1, 22885.0], [95.2, 23016.0], [95.3, 23069.0], [95.4, 23083.0], [95.5, 23083.0], [95.6, 23465.0], [95.7, 23623.0], [95.8, 23768.0], [95.9, 23768.0], [96.0, 24008.0], [96.1, 24040.0], [96.2, 24648.0], [96.3, 24648.0], [96.4, 24664.0], [96.5, 24806.0], [96.6, 24806.0], [96.7, 24830.0], [96.8, 25212.0], [96.9, 25214.0], [97.0, 25214.0], [97.1, 25429.0], [97.2, 25741.0], [97.3, 25831.0], [97.4, 25831.0], [97.5, 25871.0], [97.6, 26473.0], [97.7, 26554.0], [97.8, 26554.0], [97.9, 27091.0], [98.0, 27439.0], [98.1, 27731.0], [98.2, 27731.0], [98.3, 28351.0], [98.4, 28415.0], [98.5, 28415.0], [98.6, 29006.0], [98.7, 29448.0], [98.8, 29956.0], [98.9, 29956.0], [99.0, 30726.0], [99.1, 31398.0], [99.2, 32318.0], [99.3, 32318.0], [99.4, 35504.0], [99.5, 35566.0], [99.6, 62161.0], [99.7, 62161.0], [99.8, 73698.0], [99.9, 2074331.0]], "isOverall": false, "label": "POST. cvnet.cpd.ua.es/servicioweb/publicos/pub_gral.asmx", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 1100.0, "maxY": 42.0, "series": [{"data": [[62100.0, 1.0], [1100.0, 1.0], [1200.0, 2.0], [1400.0, 1.0], [1500.0, 1.0], [1700.0, 3.0], [1800.0, 6.0], [1900.0, 1.0], [2000.0, 3.0], [2100.0, 2.0], [2300.0, 6.0], [2200.0, 10.0], [2400.0, 13.0], [2500.0, 23.0], [2600.0, 20.0], [2700.0, 15.0], [2800.0, 9.0], [2900.0, 12.0], [3000.0, 6.0], [3100.0, 3.0], [3300.0, 6.0], [3200.0, 5.0], [3400.0, 11.0], [3500.0, 12.0], [3600.0, 9.0], [3700.0, 13.0], [3800.0, 8.0], [3900.0, 7.0], [4000.0, 3.0], [4200.0, 10.0], [4300.0, 4.0], [4100.0, 8.0], [4500.0, 5.0], [4600.0, 7.0], [4400.0, 8.0], [4700.0, 12.0], [4800.0, 11.0], [5000.0, 12.0], [5100.0, 7.0], [4900.0, 9.0], [5200.0, 5.0], [5300.0, 8.0], [5500.0, 6.0], [5400.0, 8.0], [5600.0, 4.0], [5800.0, 5.0], [5700.0, 9.0], [5900.0, 8.0], [6000.0, 3.0], [6100.0, 5.0], [6300.0, 4.0], [6200.0, 5.0], [6500.0, 7.0], [6400.0, 3.0], [6600.0, 4.0], [6800.0, 3.0], [6900.0, 4.0], [6700.0, 7.0], [7000.0, 6.0], [7100.0, 2.0], [7200.0, 5.0], [7400.0, 3.0], [7300.0, 4.0], [7500.0, 3.0], [7600.0, 2.0], [7700.0, 10.0], [7800.0, 5.0], [7900.0, 5.0], [8000.0, 3.0], [8100.0, 4.0], [8200.0, 4.0], [8500.0, 6.0], [8600.0, 1.0], [8700.0, 2.0], [8400.0, 3.0], [8300.0, 1.0], [9200.0, 3.0], [9100.0, 2.0], [8900.0, 3.0], [9000.0, 2.0], [8800.0, 1.0], [9300.0, 2.0], [9500.0, 3.0], [9700.0, 2.0], [9400.0, 2.0], [9600.0, 2.0], [10000.0, 2.0], [9800.0, 3.0], [10100.0, 5.0], [10200.0, 1.0], [10700.0, 1.0], [10300.0, 2.0], [10600.0, 1.0], [10400.0, 2.0], [10500.0, 1.0], [11200.0, 2.0], [10800.0, 2.0], [11000.0, 4.0], [11100.0, 1.0], [11500.0, 2.0], [11300.0, 2.0], [11400.0, 2.0], [11600.0, 1.0], [12100.0, 2.0], [11900.0, 1.0], [12000.0, 2.0], [11800.0, 1.0], [12700.0, 4.0], [12500.0, 1.0], [12300.0, 1.0], [12600.0, 2.0], [12400.0, 1.0], [12800.0, 3.0], [13300.0, 2.0], [13100.0, 1.0], [13200.0, 2.0], [13700.0, 3.0], [13500.0, 1.0], [13800.0, 1.0], [13900.0, 2.0], [14200.0, 1.0], [14100.0, 1.0], [14800.0, 1.0], [15100.0, 1.0], [15800.0, 1.0], [15700.0, 1.0], [15400.0, 1.0], [16000.0, 1.0], [16300.0, 1.0], [17000.0, 1.0], [16800.0, 1.0], [17200.0, 1.0], [17600.0, 5.0], [18200.0, 2.0], [18400.0, 2.0], [17800.0, 2.0], [18600.0, 2.0], [18800.0, 5.0], [19400.0, 1.0], [19200.0, 1.0], [20200.0, 7.0], [20000.0, 3.0], [19800.0, 2.0], [20400.0, 2.0], [19600.0, 1.0], [21000.0, 42.0], [20600.0, 1.0], [21400.0, 2.0], [20800.0, 4.0], [21200.0, 1.0], [22000.0, 2.0], [22400.0, 1.0], [22200.0, 1.0], [23000.0, 3.0], [23400.0, 1.0], [22600.0, 1.0], [22800.0, 1.0], [24000.0, 2.0], [23600.0, 1.0], [25200.0, 2.0], [24800.0, 2.0], [24600.0, 2.0], [25400.0, 1.0], [25800.0, 2.0], [26400.0, 1.0], [27400.0, 1.0], [27000.0, 1.0], [28400.0, 1.0], [29400.0, 1.0], [29000.0, 1.0], [73600.0, 1.0], [35500.0, 2.0], [2074300.0, 1.0], [17300.0, 4.0], [16900.0, 2.0], [17900.0, 2.0], [17700.0, 5.0], [18100.0, 1.0], [19100.0, 2.0], [18900.0, 3.0], [18700.0, 1.0], [18500.0, 1.0], [19300.0, 2.0], [19500.0, 2.0], [19900.0, 2.0], [20300.0, 1.0], [20100.0, 3.0], [21100.0, 2.0], [20700.0, 2.0], [21700.0, 2.0], [21900.0, 1.0], [22300.0, 1.0], [22100.0, 1.0], [23700.0, 1.0], [26500.0, 1.0], [25700.0, 1.0], [27700.0, 1.0], [28300.0, 1.0], [30700.0, 1.0], [29900.0, 1.0], [31300.0, 1.0], [32300.0, 1.0]], "isOverall": false, "label": "POST. cvnet.cpd.ua.es/servicioweb/publicos/pub_gral.asmx", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 2074300.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 4.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 692.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 4.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 692.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 40.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.73825262E12, "maxY": 5.0, "series": [{"data": [[1.738254E12, 5.0], [1.7382528E12, 5.0], [1.73825262E12, 1.5555555555555556], [1.73825292E12, 5.0], [1.73825322E12, 5.0], [1.73825352E12, 5.0], [1.7382543E12, 5.0], [1.73825334E12, 5.0], [1.73825364E12, 5.0], [1.73825418E12, 5.0], [1.73825388E12, 5.0], [1.73825274E12, 5.0], [1.73825304E12, 5.0], [1.73825286E12, 5.0], [1.73825316E12, 5.0], [1.73825346E12, 5.0], [1.73825436E12, 5.0], [1.73825376E12, 5.0], [1.73825406E12, 5.0], [1.73825358E12, 5.0], [1.73825424E12, 5.0], [1.73825394E12, 5.0], [1.73825514E12, 1.0], [1.73825268E12, 3.4705882352941178], [1.73825298E12, 5.0], [1.73825328E12, 5.0], [1.7382531E12, 5.0], [1.7382534E12, 5.0], [1.73825442E12, 4.461538461538462], [1.7382537E12, 5.0], [1.73825412E12, 5.0], [1.73825382E12, 5.0]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.73825514E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 5545.3, "minX": 1.0, "maxY": 419298.2, "series": [{"data": [[1.0, 419298.2], [2.0, 5545.3], [4.0, 13828.625], [5.0, 9539.317796610172], [3.0, 6489.999999999999]], "isOverall": false, "label": "POST. cvnet.cpd.ua.es/servicioweb/publicos/pub_gral.asmx", "isController": false}, {"data": [[4.907608695652181, 12294.646739130443]], "isOverall": false, "label": "POST. cvnet.cpd.ua.es/servicioweb/publicos/pub_gral.asmx-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 5.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 9.9, "minX": 1.73825262E12, "maxY": 1645896.1333333333, "series": [{"data": [[1.738254E12, 801669.4833333333], [1.7382528E12, 989213.2666666667], [1.73825262E12, 379105.88333333336], [1.73825292E12, 1132607.8666666667], [1.73825322E12, 912107.6666666666], [1.73825352E12, 1032367.0833333334], [1.7382543E12, 1251470.7333333334], [1.73825334E12, 895151.1666666666], [1.73825364E12, 1131727.65], [1.73825418E12, 1012400.0], [1.73825388E12, 780680.2666666667], [1.73825274E12, 1645896.1333333333], [1.73825304E12, 672881.9833333333], [1.73825286E12, 1387029.4666666666], [1.73825316E12, 615984.2333333333], [1.73825346E12, 1329800.9166666667], [1.73825436E12, 843526.2833333333], [1.73825376E12, 1086281.25], [1.73825406E12, 381005.95], [1.73825358E12, 960858.6666666666], [1.73825424E12, 933577.2166666667], [1.73825394E12, 1093986.7], [1.73825514E12, 38128.28333333333], [1.73825268E12, 598886.2], [1.73825298E12, 890943.8], [1.73825328E12, 883200.2166666667], [1.7382531E12, 1211467.2166666666], [1.7382534E12, 843106.1666666666], [1.73825442E12, 569662.1666666666], [1.7382537E12, 708569.95], [1.73825412E12, 850639.3333333334], [1.73825382E12, 1419575.35]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.738254E12, 188.1], [1.7382528E12, 237.6], [1.73825262E12, 89.1], [1.73825292E12, 277.2], [1.73825322E12, 207.9], [1.73825352E12, 227.7], [1.7382543E12, 306.9], [1.73825334E12, 198.0], [1.73825364E12, 287.1], [1.73825418E12, 237.6], [1.73825388E12, 198.0], [1.73825274E12, 366.3], [1.73825304E12, 168.3], [1.73825286E12, 316.8], [1.73825316E12, 138.6], [1.73825346E12, 306.9], [1.73825436E12, 207.9], [1.73825376E12, 257.4], [1.73825406E12, 89.1], [1.73825358E12, 227.7], [1.73825424E12, 207.9], [1.73825394E12, 247.5], [1.73825514E12, 9.9], [1.73825268E12, 148.5], [1.73825298E12, 217.8], [1.73825328E12, 227.7], [1.7382531E12, 267.3], [1.7382534E12, 198.0], [1.73825442E12, 128.7], [1.7382537E12, 168.3], [1.73825412E12, 207.9], [1.73825382E12, 326.7]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.73825514E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 3987.1111111111113, "minX": 1.73825262E12, "maxY": 2074331.0, "series": [{"data": [[1.738254E12, 12194.739130434782], [1.7382528E12, 9996.925925925929], [1.73825262E12, 3987.1111111111113], [1.73825292E12, 8607.32142857143], [1.73825322E12, 12955.227272727274], [1.73825352E12, 9377.269230769232], [1.7382543E12, 8113.096774193548], [1.73825334E12, 10450.047619047618], [1.73825364E12, 7116.068965517242], [1.73825418E12, 10365.919999999998], [1.73825388E12, 10855.45], [1.73825274E12, 6459.07894736842], [1.73825304E12, 13496.349999999999], [1.73825286E12, 9668.937499999998], [1.73825316E12, 12556.312499999998], [1.73825346E12, 6710.312500000001], [1.73825436E12, 8093.590909090907], [1.73825376E12, 8191.0370370370365], [1.73825406E12, 15131.692307692309], [1.73825358E12, 8378.25], [1.73825424E12, 9676.272727272728], [1.73825394E12, 7651.999999999999], [1.73825514E12, 2074331.0], [1.73825268E12, 11962.176470588234], [1.73825298E12, 13119.840000000002], [1.73825328E12, 9310.478260869568], [1.7382531E12, 8460.814814814814], [1.7382534E12, 10557.954545454544], [1.73825442E12, 10424.923076923074], [1.7382537E12, 13953.444444444445], [1.73825412E12, 9249.791666666666], [1.73825382E12, 6128.058823529413]], "isOverall": false, "label": "POST. cvnet.cpd.ua.es/servicioweb/publicos/pub_gral.asmx", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.73825514E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 1164.0, "minX": 1.73825262E12, "maxY": 21479.0, "series": [{"data": [[1.738254E12, 4848.478260869565], [1.7382528E12, 3793.1111111111113], [1.73825262E12, 1164.0], [1.73825292E12, 4095.678571428572], [1.73825322E12, 6588.863636363637], [1.73825352E12, 2479.0], [1.7382543E12, 4526.451612903227], [1.73825334E12, 3217.6190476190477], [1.73825364E12, 3546.7586206896544], [1.73825418E12, 5186.879999999998], [1.73825388E12, 4907.3], [1.73825274E12, 2487.315789473684], [1.73825304E12, 5441.4], [1.73825286E12, 5741.500000000001], [1.73825316E12, 5073.3125], [1.73825346E12, 2487.125], [1.73825436E12, 2242.7272727272725], [1.73825376E12, 3643.333333333333], [1.73825406E12, 5617.000000000001], [1.73825358E12, 3856.9583333333335], [1.73825424E12, 3435.409090909091], [1.73825394E12, 3966.08], [1.73825514E12, 21479.0], [1.73825268E12, 4722.058823529411], [1.73825298E12, 5864.159999999999], [1.73825328E12, 4394.0], [1.7382531E12, 3495.1851851851848], [1.7382534E12, 4467.681818181818], [1.73825442E12, 5870.2307692307695], [1.7382537E12, 4881.2777777777765], [1.73825412E12, 1847.3333333333333], [1.73825382E12, 1789.5294117647056]], "isOverall": false, "label": "POST. cvnet.cpd.ua.es/servicioweb/publicos/pub_gral.asmx", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.73825514E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 687.1111111111111, "minX": 1.73825262E12, "maxY": 11715.307692307691, "series": [{"data": [[1.738254E12, 8034.608695652173], [1.7382528E12, 5409.814814814816], [1.73825262E12, 687.1111111111111], [1.73825292E12, 3645.7499999999995], [1.73825322E12, 7137.909090909092], [1.73825352E12, 4507.807692307692], [1.7382543E12, 3924.096774193548], [1.73825334E12, 3646.142857142858], [1.73825364E12, 2822.4827586206893], [1.73825418E12, 5510.8], [1.73825388E12, 4280.150000000001], [1.73825274E12, 2552.105263157895], [1.73825304E12, 8256.35], [1.73825286E12, 5007.343749999999], [1.73825316E12, 7349.812499999998], [1.73825346E12, 2621.125], [1.73825436E12, 2651.136363636364], [1.73825376E12, 3964.0370370370365], [1.73825406E12, 11715.307692307691], [1.73825358E12, 4349.791666666666], [1.73825424E12, 3700.9090909090914], [1.73825394E12, 3297.24], [1.73825514E12, 6310.0], [1.73825268E12, 6855.294117647058], [1.73825298E12, 7984.599999999999], [1.73825328E12, 3976.565217391303], [1.7382531E12, 2891.6296296296305], [1.7382534E12, 6016.863636363636], [1.73825442E12, 5328.461538461538], [1.7382537E12, 5439.555555555555], [1.73825412E12, 3968.0000000000005], [1.73825382E12, 1787.7941176470588]], "isOverall": false, "label": "POST. cvnet.cpd.ua.es/servicioweb/publicos/pub_gral.asmx", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.73825514E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 1169.0, "minX": 1.73825262E12, "maxY": 2074331.0, "series": [{"data": [[1.738254E12, 24040.0], [1.7382528E12, 35566.0], [1.73825262E12, 6521.0], [1.73825292E12, 20294.0], [1.73825322E12, 32318.0], [1.73825352E12, 17627.0], [1.7382543E12, 27091.0], [1.73825334E12, 27731.0], [1.73825364E12, 19873.0], [1.73825418E12, 24648.0], [1.73825388E12, 28351.0], [1.73825274E12, 19178.0], [1.73825304E12, 23465.0], [1.73825286E12, 28415.0], [1.73825316E12, 23083.0], [1.73825346E12, 19576.0], [1.73825436E12, 20269.0], [1.73825376E12, 29448.0], [1.73825406E12, 24830.0], [1.73825358E12, 21262.0], [1.73825424E12, 25741.0], [1.73825394E12, 29006.0], [1.73825514E12, 2074331.0], [1.73825268E12, 30726.0], [1.73825298E12, 25871.0], [1.73825328E12, 27439.0], [1.7382531E12, 62161.0], [1.7382534E12, 35504.0], [1.73825442E12, 25429.0], [1.7382537E12, 73698.0], [1.73825412E12, 29956.0], [1.73825382E12, 13758.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.738254E12, 23069.0], [1.7382528E12, 22073.0], [1.73825262E12, 6521.0], [1.73825292E12, 18645.4], [1.73825322E12, 29518.600000000006], [1.73825352E12, 16233.0], [1.7382543E12, 21969.800000000003], [1.73825334E12, 22787.600000000002], [1.73825364E12, 19146.0], [1.73825418E12, 21605.0], [1.73825388E12, 26545.9], [1.73825274E12, 11406.400000000023], [1.73825304E12, 23105.8], [1.73825286E12, 20267.0], [1.73825316E12, 22400.5], [1.73825346E12, 16090.000000000004], [1.73825436E12, 17406.4], [1.73825376E12, 20334.3], [1.73825406E12, 24830.0], [1.73825358E12, 19141.4], [1.73825424E12, 21827.600000000002], [1.73825394E12, 20972.4], [1.73825514E12, 2074331.0], [1.73825268E12, 27418.800000000003], [1.73825298E12, 23965.699999999997], [1.73825328E12, 20692.600000000006], [1.7382531E12, 20474.2], [1.7382534E12, 19894.700000000004], [1.73825442E12, 23677.0], [1.7382537E12, 35404.399999999965], [1.73825412E12, 20522.600000000006], [1.73825382E12, 10854.400000000001]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.738254E12, 24040.0], [1.7382528E12, 35566.0], [1.73825262E12, 6521.0], [1.73825292E12, 20294.0], [1.73825322E12, 32318.0], [1.73825352E12, 17627.0], [1.7382543E12, 27091.0], [1.73825334E12, 27731.0], [1.73825364E12, 19873.0], [1.73825418E12, 24648.0], [1.73825388E12, 28351.0], [1.73825274E12, 19178.0], [1.73825304E12, 23465.0], [1.73825286E12, 28415.0], [1.73825316E12, 23083.0], [1.73825346E12, 19576.0], [1.73825436E12, 20269.0], [1.73825376E12, 29448.0], [1.73825406E12, 24830.0], [1.73825358E12, 21262.0], [1.73825424E12, 25741.0], [1.73825394E12, 29006.0], [1.73825514E12, 2074331.0], [1.73825268E12, 30726.0], [1.73825298E12, 25871.0], [1.73825328E12, 27439.0], [1.7382531E12, 62161.0], [1.7382534E12, 35504.0], [1.73825442E12, 25429.0], [1.7382537E12, 73698.0], [1.73825412E12, 29956.0], [1.73825382E12, 13758.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.738254E12, 24040.0], [1.7382528E12, 32977.5], [1.73825262E12, 6521.0], [1.73825292E12, 19586.149999999994], [1.73825322E12, 32226.0], [1.73825352E12, 17370.199999999997], [1.7382543E12, 25241.199999999997], [1.73825334E12, 27488.699999999997], [1.73825364E12, 19862.0], [1.73825418E12, 24078.5], [1.73825388E12, 28261.149999999998], [1.73825274E12, 18928.7], [1.73825304E12, 23465.0], [1.73825286E12, 25394.44999999999], [1.73825316E12, 23083.0], [1.73825346E12, 18536.199999999997], [1.73825436E12, 20086.799999999996], [1.73825376E12, 26405.44999999999], [1.73825406E12, 24830.0], [1.73825358E12, 21023.399999999998], [1.73825424E12, 25384.299999999996], [1.73825394E12, 26663.599999999995], [1.73825514E12, 2074331.0], [1.73825268E12, 30726.0], [1.73825298E12, 25711.249999999996], [1.73825328E12, 26488.199999999986], [1.7382531E12, 45772.99999999991], [1.7382534E12, 34731.69999999999], [1.73825442E12, 25429.0], [1.7382537E12, 73698.0], [1.73825412E12, 29206.59999999999], [1.73825382E12, 13504.599999999999]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.738254E12, 2092.0], [1.7382528E12, 1805.0], [1.73825262E12, 2420.0], [1.73825292E12, 2505.0], [1.73825322E12, 2594.0], [1.73825352E12, 2294.0], [1.7382543E12, 1835.0], [1.73825334E12, 2358.0], [1.73825364E12, 1853.0], [1.73825418E12, 2997.0], [1.73825388E12, 1273.0], [1.73825274E12, 2227.0], [1.73825304E12, 1169.0], [1.73825286E12, 1773.0], [1.73825316E12, 3498.0], [1.73825346E12, 1525.0], [1.73825436E12, 1817.0], [1.73825376E12, 1720.0], [1.73825406E12, 3698.0], [1.73825358E12, 2523.0], [1.73825424E12, 2294.0], [1.73825394E12, 2571.0], [1.73825514E12, 2074331.0], [1.73825268E12, 2158.0], [1.73825298E12, 3645.0], [1.73825328E12, 2012.0], [1.7382531E12, 2271.0], [1.7382534E12, 1456.0], [1.73825442E12, 2445.0], [1.7382537E12, 2200.0], [1.73825412E12, 2223.0], [1.73825382E12, 1237.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.738254E12, 7096.0], [1.7382528E12, 5661.5], [1.73825262E12, 3421.0], [1.73825292E12, 6561.0], [1.73825322E12, 8790.0], [1.73825352E12, 6599.0], [1.7382543E12, 5692.0], [1.73825334E12, 7530.0], [1.73825364E12, 5197.0], [1.73825418E12, 6281.0], [1.73825388E12, 7859.0], [1.73825274E12, 4339.0], [1.73825304E12, 12500.0], [1.73825286E12, 6449.0], [1.73825316E12, 9282.0], [1.73825346E12, 4674.0], [1.73825436E12, 6934.0], [1.73825376E12, 4894.5], [1.73825406E12, 8198.0], [1.73825358E12, 4250.0], [1.73825424E12, 5635.0], [1.73825394E12, 5083.0], [1.73825514E12, 2074331.0], [1.73825268E12, 9315.0], [1.73825298E12, 10063.0], [1.73825328E12, 6729.0], [1.7382531E12, 3708.0], [1.7382534E12, 6609.5], [1.73825442E12, 7796.0], [1.7382537E12, 7875.0], [1.73825412E12, 4799.0], [1.73825382E12, 4739.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.73825514E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 3239.0, "minX": 1.0, "maxY": 21047.0, "series": [{"data": [[1.0, 6507.5], [2.0, 5194.0], [4.0, 3239.0], [3.0, 5533.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[1.0, 21041.0], [2.0, 21047.0], [3.0, 21041.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 4.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 1209.0, "series": [{"data": [[1.0, 1186.0], [2.0, 1157.0], [4.0, 1101.0], [3.0, 1209.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[1.0, 0.0], [2.0, 0.0], [3.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 4.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.16666666666666666, "minX": 1.73825262E12, "maxY": 0.6333333333333333, "series": [{"data": [[1.738254E12, 0.36666666666666664], [1.7382528E12, 0.45], [1.73825262E12, 0.18333333333333332], [1.73825292E12, 0.48333333333333334], [1.73825322E12, 0.36666666666666664], [1.73825352E12, 0.4666666666666667], [1.7382543E12, 0.48333333333333334], [1.73825334E12, 0.35], [1.73825364E12, 0.5], [1.73825418E12, 0.4166666666666667], [1.73825388E12, 0.35], [1.73825274E12, 0.6333333333333333], [1.73825304E12, 0.3333333333333333], [1.73825286E12, 0.5166666666666667], [1.73825316E12, 0.2833333333333333], [1.73825346E12, 0.5166666666666667], [1.73825436E12, 0.38333333333333336], [1.73825376E12, 0.4166666666666667], [1.73825406E12, 0.23333333333333334], [1.73825358E12, 0.38333333333333336], [1.73825424E12, 0.36666666666666664], [1.73825394E12, 0.4166666666666667], [1.73825268E12, 0.3333333333333333], [1.73825298E12, 0.4166666666666667], [1.73825328E12, 0.38333333333333336], [1.7382531E12, 0.43333333333333335], [1.7382534E12, 0.35], [1.73825442E12, 0.16666666666666666], [1.7382537E12, 0.2833333333333333], [1.73825412E12, 0.4], [1.73825382E12, 0.6]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.73825442E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.73825262E12, "maxY": 0.6166666666666667, "series": [{"data": [[1.738254E12, 0.31666666666666665], [1.7382528E12, 0.4], [1.73825262E12, 0.15], [1.73825292E12, 0.4666666666666667], [1.73825322E12, 0.35], [1.73825352E12, 0.38333333333333336], [1.7382543E12, 0.5166666666666667], [1.73825334E12, 0.3333333333333333], [1.73825364E12, 0.48333333333333334], [1.73825418E12, 0.4], [1.73825388E12, 0.3333333333333333], [1.73825274E12, 0.6166666666666667], [1.73825304E12, 0.2833333333333333], [1.73825286E12, 0.5333333333333333], [1.73825316E12, 0.23333333333333334], [1.73825346E12, 0.5166666666666667], [1.73825436E12, 0.35], [1.73825376E12, 0.43333333333333335], [1.73825406E12, 0.15], [1.73825358E12, 0.38333333333333336], [1.73825424E12, 0.35], [1.73825394E12, 0.4166666666666667], [1.73825514E12, 0.016666666666666666], [1.73825268E12, 0.25], [1.73825298E12, 0.36666666666666664], [1.73825328E12, 0.38333333333333336], [1.7382531E12, 0.45], [1.7382534E12, 0.3333333333333333], [1.73825442E12, 0.21666666666666667], [1.7382537E12, 0.2833333333333333], [1.73825412E12, 0.35], [1.73825382E12, 0.55]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.738254E12, 0.06666666666666667], [1.73825316E12, 0.03333333333333333], [1.73825346E12, 0.016666666666666666], [1.73825436E12, 0.016666666666666666], [1.7382528E12, 0.05], [1.73825376E12, 0.016666666666666666], [1.73825406E12, 0.06666666666666667], [1.73825358E12, 0.016666666666666666], [1.73825424E12, 0.016666666666666666], [1.73825322E12, 0.016666666666666666], [1.73825352E12, 0.05], [1.73825334E12, 0.016666666666666666], [1.73825268E12, 0.03333333333333333], [1.73825418E12, 0.016666666666666666], [1.73825298E12, 0.05], [1.7382534E12, 0.03333333333333333], [1.7382537E12, 0.016666666666666666], [1.73825274E12, 0.016666666666666666], [1.73825412E12, 0.05], [1.73825304E12, 0.05], [1.73825382E12, 0.016666666666666666]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.conn.HttpHostConnectException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.73825514E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.73825262E12, "maxY": 0.6166666666666667, "series": [{"data": [[1.738254E12, 0.06666666666666667], [1.73825316E12, 0.03333333333333333], [1.73825346E12, 0.016666666666666666], [1.73825436E12, 0.016666666666666666], [1.7382528E12, 0.05], [1.73825376E12, 0.016666666666666666], [1.73825406E12, 0.06666666666666667], [1.73825358E12, 0.016666666666666666], [1.73825424E12, 0.016666666666666666], [1.73825322E12, 0.016666666666666666], [1.73825352E12, 0.05], [1.73825334E12, 0.016666666666666666], [1.73825268E12, 0.03333333333333333], [1.73825418E12, 0.016666666666666666], [1.73825298E12, 0.05], [1.7382534E12, 0.03333333333333333], [1.7382537E12, 0.016666666666666666], [1.73825274E12, 0.016666666666666666], [1.73825412E12, 0.05], [1.73825304E12, 0.05], [1.73825382E12, 0.016666666666666666]], "isOverall": false, "label": "POST. cvnet.cpd.ua.es/servicioweb/publicos/pub_gral.asmx-failure", "isController": false}, {"data": [[1.738254E12, 0.31666666666666665], [1.7382528E12, 0.4], [1.73825262E12, 0.15], [1.73825292E12, 0.4666666666666667], [1.73825322E12, 0.35], [1.73825352E12, 0.38333333333333336], [1.7382543E12, 0.5166666666666667], [1.73825334E12, 0.3333333333333333], [1.73825364E12, 0.48333333333333334], [1.73825418E12, 0.4], [1.73825388E12, 0.3333333333333333], [1.73825274E12, 0.6166666666666667], [1.73825304E12, 0.2833333333333333], [1.73825286E12, 0.5333333333333333], [1.73825316E12, 0.23333333333333334], [1.73825346E12, 0.5166666666666667], [1.73825436E12, 0.35], [1.73825376E12, 0.43333333333333335], [1.73825406E12, 0.15], [1.73825358E12, 0.38333333333333336], [1.73825424E12, 0.35], [1.73825394E12, 0.4166666666666667], [1.73825514E12, 0.016666666666666666], [1.73825268E12, 0.25], [1.73825298E12, 0.36666666666666664], [1.73825328E12, 0.38333333333333336], [1.7382531E12, 0.45], [1.7382534E12, 0.3333333333333333], [1.73825442E12, 0.21666666666666667], [1.7382537E12, 0.2833333333333333], [1.73825412E12, 0.35], [1.73825382E12, 0.55]], "isOverall": false, "label": "POST. cvnet.cpd.ua.es/servicioweb/publicos/pub_gral.asmx-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.73825514E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.73825262E12, "maxY": 0.6166666666666667, "series": [{"data": [[1.738254E12, 0.31666666666666665], [1.7382528E12, 0.4], [1.73825262E12, 0.15], [1.73825292E12, 0.4666666666666667], [1.73825322E12, 0.35], [1.73825352E12, 0.38333333333333336], [1.7382543E12, 0.5166666666666667], [1.73825334E12, 0.3333333333333333], [1.73825364E12, 0.48333333333333334], [1.73825418E12, 0.4], [1.73825388E12, 0.3333333333333333], [1.73825274E12, 0.6166666666666667], [1.73825304E12, 0.2833333333333333], [1.73825286E12, 0.5333333333333333], [1.73825316E12, 0.23333333333333334], [1.73825346E12, 0.5166666666666667], [1.73825436E12, 0.35], [1.73825376E12, 0.43333333333333335], [1.73825406E12, 0.15], [1.73825358E12, 0.38333333333333336], [1.73825424E12, 0.35], [1.73825394E12, 0.4166666666666667], [1.73825514E12, 0.016666666666666666], [1.73825268E12, 0.25], [1.73825298E12, 0.36666666666666664], [1.73825328E12, 0.38333333333333336], [1.7382531E12, 0.45], [1.7382534E12, 0.3333333333333333], [1.73825442E12, 0.21666666666666667], [1.7382537E12, 0.2833333333333333], [1.73825412E12, 0.35], [1.73825382E12, 0.55]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.738254E12, 0.06666666666666667], [1.73825316E12, 0.03333333333333333], [1.73825346E12, 0.016666666666666666], [1.73825436E12, 0.016666666666666666], [1.7382528E12, 0.05], [1.73825376E12, 0.016666666666666666], [1.73825406E12, 0.06666666666666667], [1.73825358E12, 0.016666666666666666], [1.73825424E12, 0.016666666666666666], [1.73825322E12, 0.016666666666666666], [1.73825352E12, 0.05], [1.73825334E12, 0.016666666666666666], [1.73825268E12, 0.03333333333333333], [1.73825418E12, 0.016666666666666666], [1.73825298E12, 0.05], [1.7382534E12, 0.03333333333333333], [1.7382537E12, 0.016666666666666666], [1.73825274E12, 0.016666666666666666], [1.73825412E12, 0.05], [1.73825304E12, 0.05], [1.73825382E12, 0.016666666666666666]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.73825514E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

